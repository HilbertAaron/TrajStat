/* Copyright 2014 - Yaqiang Wang,
 * yaqiang.wang@gmail.com
 * 
 * This library is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2.1 of the License, or (at
 * your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser
 * General Public License for more details.
 */
package trajstat.forms;

import java.awt.Color;
import java.awt.Cursor;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;
import org.meteoinfo.geoprocess.analysis.Clustering;
import org.meteoinfo.ui.CheckBoxListEntry;
import org.meteoinfo.layer.VectorLayer;
import org.meteoinfo.legend.GroupNode;
import org.meteoinfo.legend.LayerNode;
import org.meteoinfo.plugin.IApplication;
import org.meteoinfo.shape.PolylineZShape;
import org.meteoinfo.geoprocess.analysis.DistanceType;
import org.meteoinfo.global.GenericFileFilter;
import org.meteoinfo.global.table.DataTypes;
import org.meteoinfo.layer.LayerDrawType;
import org.meteoinfo.legend.LegendManage;
import org.meteoinfo.legend.LegendScheme;
import org.meteoinfo.shape.PointZ;
import org.meteoinfo.shape.ShapeTypes;
import trajstat.Main;

/**
 *
 * @author Yaqiang Wang
 */
public class FrmClusterCal extends javax.swing.JDialog {

    private IApplication app;

    /**
     * Creates new form FrmClusterCal
     */
    public FrmClusterCal(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();

        app = (IApplication) parent;
        GroupNode gNode = app.getMapDocument().getActiveMapFrame().getGroupByName("Trajectory");
        DefaultListModel listModel = new DefaultListModel();
        for (int i = 0; i < gNode.getLayers().size(); i++) {
            LayerNode lNode = gNode.getLayers().get(i);
            CheckBoxListEntry cbe;
            if (i == gNode.getLayers().size() - 1) {
                cbe = new CheckBoxListEntry(lNode.getMapLayer(), true);
            } else {
                cbe = new CheckBoxListEntry(lNode.getMapLayer(), false);
            }
            listModel.insertElementAt(cbe, 0);
        }
        this.checkBoxList_Data.setModel(listModel);
        this.checkBoxList_Data.setSelectedIndex(0);

        this.jComboBox_Distance.removeAllItems();
        this.jComboBox_Distance.addItem(DistanceType.EUCLIDEAN);
        this.jComboBox_Distance.addItem(DistanceType.ANGLE);

        this.jComboBox_MaxClusterNum.removeAllItems();
        for (int i = 9; i <= 20; i++) {
            this.jComboBox_MaxClusterNum.addItem(i);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jCheckBox_IgnoreDataLines = new javax.swing.JCheckBox();
        jLabel_TrajNum = new javax.swing.JLabel();
        jLabel_PointNum = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jTextField_OutputFile = new javax.swing.JTextField();
        jButton_OutputFile = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jComboBox_Distance = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        jComboBox_MaxClusterNum = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        checkBoxList_Data = new org.meteoinfo.ui.JCheckBoxList();
        jButton_SelAll = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jTextField_PointInterval = new javax.swing.JTextField();
        jLabel_TrajNumValue = new javax.swing.JLabel();
        jLabel_PointNumValue = new javax.swing.JLabel();
        jButton_Calculate = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jComboBox_ClusterNum = new javax.swing.JComboBox();
        jButton_MeanTraj = new javax.swing.JButton();
        jButton_AddToTraj = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Setting"));

        jCheckBox_IgnoreDataLines.setText("Ignore the data lines with abnormal point number");

        jLabel_TrajNum.setText("Traj number:");

        jLabel_PointNum.setText("Point number:");

        jLabel4.setText("Output file:");

        jButton_OutputFile.setIcon(new javax.swing.ImageIcon(getClass().getResource("/trajstat/resources/TSB_Open.Image.png"))); // NOI18N
        jButton_OutputFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_OutputFileActionPerformed(evt);
            }
        });

        jLabel5.setText("Distance:");

        jComboBox_Distance.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel6.setText("Max cluster number:");

        jComboBox_MaxClusterNum.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBox_MaxClusterNum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox_MaxClusterNumActionPerformed(evt);
            }
        });

        jLabel1.setText("Trajectory layers:");

        checkBoxList_Data.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        checkBoxList_Data.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                checkBoxList_DataValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(checkBoxList_Data);

        jButton_SelAll.setText("Select All");
        jButton_SelAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_SelAllActionPerformed(evt);
            }
        });

        jLabel2.setText("Point interval:");

        jTextField_PointInterval.setText("1");

        jLabel_TrajNumValue.setText("...");

        jLabel_PointNumValue.setText("...");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField_OutputFile, javax.swing.GroupLayout.PREFERRED_SIZE, 315, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(108, 108, 108))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jButton_OutputFile, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jCheckBox_IgnoreDataLines)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel5)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jComboBox_Distance, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(45, 45, 45)
                                        .addComponent(jLabel6)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jComboBox_MaxClusterNum, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jButton_SelAll, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 331, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel_TrajNum)
                                    .addComponent(jLabel_PointNum)
                                    .addComponent(jLabel_TrajNumValue)
                                    .addComponent(jLabel_PointNumValue)
                                    .addComponent(jTextField_PointInterval, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jButton_SelAll))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(3, 3, 3)
                        .addComponent(jTextField_PointInterval, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(jLabel_TrajNum)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel_TrajNumValue)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel_PointNum)
                        .addGap(3, 3, 3)
                        .addComponent(jLabel_PointNumValue)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBox_IgnoreDataLines)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton_OutputFile, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel4)
                        .addComponent(jTextField_OutputFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jComboBox_Distance, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(jComboBox_MaxClusterNum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jButton_Calculate.setText("Calculate");
        jButton_Calculate.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton_Calculate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_CalculateActionPerformed(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jLabel7.setText("Cluster number:");

        jComboBox_ClusterNum.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jButton_MeanTraj.setText("Mean Traj");
        jButton_MeanTraj.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_MeanTrajActionPerformed(evt);
            }
        });

        jButton_AddToTraj.setText("Add to traj");
        jButton_AddToTraj.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_AddToTrajActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jComboBox_ClusterNum, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24)
                .addComponent(jButton_MeanTraj)
                .addGap(18, 18, 18)
                .addComponent(jButton_AddToTraj)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton_AddToTraj, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton_MeanTraj, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBox_ClusterNum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton_Calculate, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jButton_Calculate, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton_OutputFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_OutputFileActionPerformed
        // TODO add your handling code here:
        String path = System.getProperty("user.dir");
        File pathDir = new File(path);
        JFileChooser aDlg = new JFileChooser();
        aDlg.setAcceptAllFileFilterUsed(false);
        aDlg.setCurrentDirectory(pathDir);
        //aDlg.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        if (JFileChooser.APPROVE_OPTION == aDlg.showOpenDialog(this)) {
            File aFile = aDlg.getSelectedFile();
            System.setProperty("user.dir", aFile.getParent());

            this.jTextField_OutputFile.setText(aFile.getAbsolutePath());
        }
    }//GEN-LAST:event_jButton_OutputFileActionPerformed

    private void jButton_SelAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_SelAllActionPerformed
        // TODO add your handling code here:
        int i;
        DefaultListModel listModel = (DefaultListModel) this.checkBoxList_Data.getModel();
        if (this.jButton_SelAll.getText().equals("Select All")) {
            for (i = 0; i < listModel.getSize(); i++) {
                ((CheckBoxListEntry) listModel.get(i)).setSelected(true);
            }
            this.jButton_SelAll.setText("Unselect All");
        } else {
            for (i = 0; i < listModel.getSize(); i++) {
                ((CheckBoxListEntry) listModel.get(i)).setSelected(false);
            }
            this.jButton_SelAll.setText("Select All");
        }
        this.checkBoxList_Data.repaint();
    }//GEN-LAST:event_jButton_SelAllActionPerformed

    private void jComboBox_MaxClusterNumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox_MaxClusterNumActionPerformed
        // TODO add your handling code here:
        if (this.jComboBox_MaxClusterNum.getItemCount() > 0) {
            int cnum = (Integer) this.jComboBox_MaxClusterNum.getSelectedItem();
            this.jComboBox_ClusterNum.removeAllItems();
            for (int i = 2; i <= cnum; i++) {
                this.jComboBox_ClusterNum.addItem(i);
            }
            this.jComboBox_ClusterNum.setSelectedIndex(4);
        }
    }//GEN-LAST:event_jComboBox_MaxClusterNumActionPerformed

    private void checkBoxList_DataValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_checkBoxList_DataValueChanged
        // TODO add your handling code here:        
        DefaultListModel listModel = (DefaultListModel) this.checkBoxList_Data.getModel();
        int trajNum = 0;
        int pointNum = 0;
        int n = 0;
        int interval = Integer.parseInt(this.jTextField_PointInterval.getText());
        for (int i = 0; i < listModel.getSize(); i++) {
            if (((CheckBoxListEntry) listModel.get(i)).isSelected()) {
                VectorLayer layer = (VectorLayer) ((CheckBoxListEntry) listModel.get(i)).getValue();
                if (n == 0) {
                    PolylineZShape shape = (PolylineZShape) layer.getShapes().get(0);
                    pointNum = shape.getPointNum() / interval;
                }
                trajNum += layer.getShapeNum();

                n += 1;
            }
        }

        this.jLabel_PointNumValue.setText(String.valueOf(pointNum));
        this.jLabel_TrajNumValue.setText(String.valueOf(trajNum));
    }//GEN-LAST:event_checkBoxList_DataValueChanged

    private void jButton_CalculateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_CalculateActionPerformed
        // TODO add your handling code here:
        if (this.checkBoxList_Data.getCheckedItems().isEmpty()) {
            JOptionPane.showMessageDialog(null, "There is no trajectory layer was selected!");
            return;
        }

        this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        DefaultListModel listModel = (DefaultListModel) this.checkBoxList_Data.getModel();
        List<VectorLayer> layers = new ArrayList<VectorLayer>();
        int i;
        for (i = 0; i < listModel.getSize(); i++) {
            if (((CheckBoxListEntry) listModel.get(i)).isSelected()) {
                layers.add((VectorLayer) ((CheckBoxListEntry) listModel.get(i)).getValue());
            }
        }
        String outfn = this.jTextField_OutputFile.getText();
        DistanceType disType = (DistanceType) this.jComboBox_Distance.getSelectedItem();
        int maxClusterNum = (Integer) this.jComboBox_MaxClusterNum.getSelectedItem();
        int trajNum = Integer.parseInt(this.jLabel_TrajNumValue.getText());
        int pointNum = Integer.parseInt(this.jLabel_PointNumValue.getText());
        int interval = Integer.parseInt(this.jTextField_PointInterval.getText());
        try {
            Clustering.calculate(layers, outfn, trajNum, pointNum * 2, maxClusterNum, interval, disType);
            JOptionPane.showMessageDialog(null, "Clustering calculation finished!");
        } catch (IOException ex) {
            Logger.getLogger(FrmClusterCal.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            this.setCursor(Cursor.getDefaultCursor());
        }
    }//GEN-LAST:event_jButton_CalculateActionPerformed

    private void jButton_MeanTrajActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_MeanTrajActionPerformed
        BufferedReader src = null;
        try {
            // TODO add your handling code here:
            String clusterFile = this.jTextField_OutputFile.getText();
            if (!new File(clusterFile).exists()) {
                JOptionPane.showMessageDialog(null, "File does not exist!"
                        + System.getProperty("line.separator") + clusterFile);
                return;
            }
            this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            DefaultListModel listModel = (DefaultListModel) this.checkBoxList_Data.getModel();
            List<VectorLayer> layers = new ArrayList<VectorLayer>();
            int i;
            for (i = 0; i < listModel.getSize(); i++) {
                if (((CheckBoxListEntry) listModel.get(i)).isSelected()) {
                    layers.add((VectorLayer) ((CheckBoxListEntry) listModel.get(i)).getValue());
                }
            }
            //---- Read files            
            String aLine;
            //String[] aDataArray;
            int M;
            //int N = 0;
            int CLev = 0;
            int Cluster;
            int j;
            CLev = (Integer) this.jComboBox_ClusterNum.getSelectedItem();
            int pointNum = Integer.parseInt(this.jLabel_PointNumValue.getText());
            M = pointNum * 3;
            //N = Integer.parseInt(this.jLabel_TrajNumValue.getText());
            double[][] trajDataArray = new double[CLev][M];
            //---- Mean Trajectories
            int[] trajNumArray = new int[CLev];
            //Initialize Trajectory number of each cluster
            for (i = 0; i < CLev; i++) {
                trajNumArray[i] = 0;
                for (j = 0; j < M; j++) {
                    trajDataArray[i][j] = 0.0;
                }
            }
            src = new BufferedReader(new FileReader(new File(clusterFile)));
            src.readLine();
            i = 0;
            int totalTrajNum = 0;
            for (VectorLayer layer : layers) {
                for (int s = 0; s < layer.getShapeNum(); s++) {
                    PolylineZShape shape = (PolylineZShape) layer.getShapes().get(s);
                    if (shape.getPointNum() != pointNum) {
                        continue;
                    }

                    aLine = src.readLine();
                    Cluster = Integer.parseInt(aLine.split(",")[CLev]);
                    int m = 0;
                    for (j = 0; j < pointNum; j++) {
                        PointZ point = (PointZ) shape.getPoints().get(j);
                        trajDataArray[Cluster - 1][m] += point.Y;
                        m += 1;
                        trajDataArray[Cluster - 1][m] += point.X;
                        m += 1;
                        trajDataArray[Cluster - 1][m] += point.Z;
                        m += 1;
                    }
                    trajNumArray[Cluster - 1] += 1;
                    totalTrajNum += 1;
                    i += 1;
                }
            }

            for (i = 0; i < CLev; i++) {
                for (j = 0; j < M; j++) {
                    trajDataArray[i][j] = trajDataArray[i][j] / trajNumArray[i];
                }
            }
            //---- Create new shape file
            String userPath = System.getProperty("user.dir");
            File pathDir = new File(userPath);
            JFileChooser aDlg = new JFileChooser();
            String[] fileExts = {"shp"};
            GenericFileFilter pFileFilter = new GenericFileFilter(fileExts, "Shape File (*.shp)");
            aDlg.setFileFilter(pFileFilter);
            aDlg.setAcceptAllFileFilterUsed(false);
            aDlg.setCurrentDirectory(pathDir);
            if (JFileChooser.APPROVE_OPTION == aDlg.showOpenDialog((JFrame) app)) {
                File file = aDlg.getSelectedFile();
                String shpfn = "";
                try {
                    shpfn = file.getCanonicalPath();
                } catch (IOException ex) {
                    Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                }
                System.setProperty("user.dir", file.getParent());
                String extent = ((GenericFileFilter) aDlg.getFileFilter()).getFileExtent();
                if (!shpfn.substring(shpfn.length() - extent.length()).equals(extent)) {
                    shpfn = shpfn + "." + extent;
                }


                VectorLayer aLayer = new VectorLayer(ShapeTypes.PolylineZ);
                aLayer.editAddField("Cluster", DataTypes.String);
                aLayer.editAddField("Traj_Num", DataTypes.Integer);
                aLayer.editAddField("Ratio", DataTypes.String);

                for (i = 0; i < CLev; i++) {
                    try {
                        PolylineZShape aPLZ = new PolylineZShape();
                        List<PointZ> points = new ArrayList<PointZ>();
                        for (j = 0; j < pointNum; j++) {
                            PointZ pt = new PointZ();
                            pt.Y = trajDataArray[i][j * 3];
                            pt.X = trajDataArray[i][j * 3 + 1];
                            pt.Z = trajDataArray[i][j * 3 + 2];
                            points.add(pt);
                        }
                        aPLZ.setPoints(points);
                        //aPLZ.setExtent(MIMath.getPointsExtent(aPLZ.getPoints()));
                        int shapeNum = aLayer.getShapeNum();
                        if (aLayer.editInsertShape(aPLZ, shapeNum)) {
                            aLayer.editCellValue("Cluster", shapeNum, String.valueOf(shapeNum + 1));
                            aLayer.editCellValue("Traj_Num", shapeNum, trajNumArray[i]);
                            String aRatio = String.format("%1$.2f", (double) trajNumArray[i] / totalTrajNum * 100) + "%";
                            aLayer.editCellValue("Ratio", shapeNum, aRatio);
                        }
                    } catch (Exception ex) {
                        Logger.getLogger(FrmClusterCal.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }

                if (aLayer.getShapeNum() > 0) {
                    aLayer.setLayerName(file.getName());
                    LegendScheme aLS = LegendManage.createSingleSymbolLegendScheme(ShapeTypes.Polyline, Color.black, 1.0f);
                    aLS.setFieldName("Cluster");
                    aLayer.setLegendScheme(aLS);
                    aLayer.setLayerDrawType(LayerDrawType.TrajLine);
                    aLayer.setFileName(shpfn);
                    aLayer.saveFile(shpfn);
                } else {
                    JOptionPane.showMessageDialog(null, "No valid shapes created.");
                    return;
                }

                //---- Add layer to legend
                Main.addLayer(aLayer, app.getMapDocument().getActiveMapFrame(), "Cluster");
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(FrmClusterCal.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(FrmClusterCal.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            this.setCursor(Cursor.getDefaultCursor());
            try {
                src.close();
            } catch (IOException ex) {
                Logger.getLogger(FrmClusterCal.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jButton_MeanTrajActionPerformed

    private void jButton_AddToTrajActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_AddToTrajActionPerformed
        BufferedReader src = null;
        try {
            // TODO add your handling code here:
            //---- Set files
            String clusterFile = this.jTextField_OutputFile.getText();
            if (!new File(clusterFile).exists()) {
                JOptionPane.showMessageDialog(null, "File does not exist!"
                        + System.getProperty("line.separator") + clusterFile);
                return;
            }
            //---- Read files            
            String aLine;
            String[] aDataArray;
            int CLev;
            int i;
            CLev = (Integer) this.jComboBox_ClusterNum.getSelectedItem();
            List<String[]> cDataArray = new ArrayList<String[]>();
            src = new BufferedReader(new FileReader(new File(clusterFile)));
            src.readLine();
            aLine = src.readLine();
            while (aLine != null) {
                if (aLine.isEmpty()) {
                    continue;
                }

                aDataArray = aLine.split(",");
                String[] data = new String[3];
                data[0] = aDataArray[0];    //Date time
                data[1] = aDataArray[1];    //Height
                data[2] = aDataArray[CLev];    //Cluster
                cDataArray.add(data);
                aLine = src.readLine();
            }
            src.close();
            //---- Get layers
            DefaultListModel listModel = (DefaultListModel) this.checkBoxList_Data.getModel();
            List<VectorLayer> layers = new ArrayList<VectorLayer>();
            for (i = 0; i < listModel.getSize(); i++) {
                if (((CheckBoxListEntry) listModel.get(i)).isSelected()) {
                    layers.add((VectorLayer) ((CheckBoxListEntry) listModel.get(i)).getValue());
                }
            }
            addClusterToLayers(cDataArray, layers);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(FrmClusterCal.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(FrmClusterCal.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                src.close();
            } catch (IOException ex) {
                Logger.getLogger(FrmClusterCal.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jButton_AddToTrajActionPerformed

    private void addClusterToLayers(final List<String[]> cDataArray, final List<VectorLayer> layers) {
        SwingWorker worker = new SwingWorker<String, String>() {
            @Override
            protected String doInBackground() throws Exception {
                //---- Show progressbar
                FrmClusterCal.this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                app.getProgressBar().setVisible(true);
                app.getProgressBar().setValue(0);
                app.getProgressBarLabel().setVisible(true);
                app.getProgressBarLabel().setText("...");

                //---- Add cluster to layers
                int sNum;
                int j;
                String aDateStr;
                Date aDate;
                SimpleDateFormat format = new SimpleDateFormat("yyyyMMddHH");
                Calendar cal = Calendar.getInstance();

                for (VectorLayer layer : layers) {
                    app.getProgressBarLabel().setText(layer.getLayerName());
                    if (layer.getFieldIdxByName("Cluster") == -1) {
                        layer.editAddField("Cluster", DataTypes.String);
                    }
                    sNum = layer.getShapeNum();
                    for (int i = 0; i < sNum; i++) {
                        aDate = (Date) layer.getCellValue("Date", i);
                        cal.setTime(aDate);
                        int hour = Integer.parseInt(layer.getCellValue("Hour", i).toString());
                        cal.set(Calendar.HOUR_OF_DAY, hour);
                        aDateStr = format.format(cal.getTime());
                        String height = layer.getCellValue("Height", i).toString();
                        for (j = 0; j < cDataArray.size(); j++) {
                            if (aDateStr.equals(cDataArray.get(j)[0]) && height.equals(cDataArray.get(j)[1])) {
                                layer.editCellValue("Cluster", i, cDataArray.get(j)[2]);
                                break;
                            }
                        }
                        app.getProgressBar().setValue((int) ((float) (i + 1) / sNum * 100));
                    }

                    layer.getAttributeTable().save();
                }

                return "";
            }

            @Override
            protected void done() {
                app.getProgressBar().setVisible(false);
                app.getProgressBarLabel().setVisible(false);
                FrmClusterCal.this.setCursor(Cursor.getDefaultCursor());
            }
        };
        
        worker.execute();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmClusterCal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmClusterCal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmClusterCal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmClusterCal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                FrmClusterCal dialog = new FrmClusterCal(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private org.meteoinfo.ui.JCheckBoxList checkBoxList_Data;
    private javax.swing.JButton jButton_AddToTraj;
    private javax.swing.JButton jButton_Calculate;
    private javax.swing.JButton jButton_MeanTraj;
    private javax.swing.JButton jButton_OutputFile;
    private javax.swing.JButton jButton_SelAll;
    private javax.swing.JCheckBox jCheckBox_IgnoreDataLines;
    private javax.swing.JComboBox jComboBox_ClusterNum;
    private javax.swing.JComboBox jComboBox_Distance;
    private javax.swing.JComboBox jComboBox_MaxClusterNum;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel_PointNum;
    private javax.swing.JLabel jLabel_PointNumValue;
    private javax.swing.JLabel jLabel_TrajNum;
    private javax.swing.JLabel jLabel_TrajNumValue;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField jTextField_OutputFile;
    private javax.swing.JTextField jTextField_PointInterval;
    // End of variables declaration//GEN-END:variables
}
